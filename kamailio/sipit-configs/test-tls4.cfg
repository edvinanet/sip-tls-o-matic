#
# $Id$
#
# This a very basic config file w aliases and anamed route but
# w/o authentication, accounting, database, multi-domain support etc.
# Please refer to sip-router.cfg for a more complete example
#

# ----------- global configuration parameters ------------------------

debug=2         # debug level (cmd line: -dddddddddd)
memdbg=10 # memory debug message level
memlog=10 # memory statistics log level
#log_facility=LOG_LOCAL0 # sets the facility used for logging (see syslog(3))

/* Uncomment these lines to enter debugging mode 
fork=no
log_stderror=yes
*/

check_via=no    # (cmd. line: -v)
dns=no          # (cmd. line: -r)
rev_dns=no      # (cmd. line: -R)
#port=5060
#children=4
#user=sip-router
#group=sip-router
#disable_core=yes #disables core dumping
#open_fd_limit=1024 # sets the open file descriptors limit
#mhomed=yes  # usefull for multihomed hosts, small performance penalty
#disable_tcp=yes 
#tcp_accept_aliases=yes # accepts the tcp alias via option (see NEWS)

#
dns_try_naptr=yes

listen=tls:132.177.252.24

alias="secure.test.sipit.net"
alias="tls4.test.sipit.net"

# ------------------- TLS Parameters ----------------------------------------

# Enable TLS hooks so that the TLS module can be used
tls_enable=yes
# This option is required if you want to use TLS as the TLS
# module does not support the new async TCP mode yet
tcp_async=no
# ------------------ module loading ----------------------------------

#loadpath "modules:modules_s"
#loadpath "/usr/lib/sip-router/modules:/usr/lib/sip-router/modules_s"
loadpath "/usr/local/lib/kamailio/modules:/usr/local/lib/kamailio/modules_k"

loadmodule "sl"
loadmodule "tm"
loadmodule "rr"
loadmodule "textops"
loadmodule "maxfwd"
loadmodule "usrloc"
loadmodule "registrar"
loadmodule "ctl"
loadmodule "cfg_rpc"
loadmodule "tls"
loadmodule "xlog"


# ----------------- setting module-specific parameters ---------------

# -- usrloc params --

modparam("usrloc", "db_mode",   0)

# -- rr params --
# add value to ;lr param to make some broken UAs happy
modparam("rr", "enable_full_lr", 1)

# ctl params
# by default ctl listens on unixs:/tmp/sip-router_ctl if no other address is
# specified in modparams; this is also the default for sercmd
modparam("ctl", "binrpc", "unixs:/tmp/sip-router_ctl")
# listen on the "standard" fifo for backward compatibility
modparam("ctl", "fifo", "fifo:/tmp/sip-router_fifo")
# listen on tcp, localhost
#modparam("ctl", "binrpc", "tcp:localhost:2046")

# -- tls --
modparam("tls", "config", "tls4.cfg");
modparam("tls", "tls_force_run", 1);

# -------------------------  request routing logic -------------------

# main routing logic

route{

	xlog("L_ALERT", "%si:%sp:\n%mb");

	# initial sanity checks -- messages with
	# max_forwards==0, or excessively long requests
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		break;
	}
	if (msg:len >=  4096 ) {
		sl_send_reply("513", "Message too big");
		break;
	}

	# we record-route all messages -- to make sure that
	# subsequent messages will go through our proxy; that's
	# particularly good if upstream and downstream entities
	# use different transport protocol
	if (!method=="REGISTER") record_route();

	# subsequent messages withing a dialog should take the
	# path determined by record-routing
	if (loose_route()) {
		# mark routing logic in request
		append_hf("P-hint: rr-enforced\r\n");
		route(FORWARD);
		break;
	}

	if (!uri==myself) {
		# mark routing logic in request
		append_hf("P-hint: outbound\r\n");
		route(FORWARD);
		break;
	}

	# if the request is for other domain use UsrLoc
	# (in case, it does not work, use the following command
	# with proper names and addresses in it)
	if (uri==myself) {

		if (method=="REGISTER") {
			#if (proto==1 || proto==2) {
			#	sl_send_reply("403", "Use TLS transport to register");
			#	break;
			#}
			#else {
				save("location");
				break;
			#}
		}

		# native SIP destinations are handled using our USRLOC DB
		if (!lookup("location")) {
			if (uri=~"sip:101@.*") {
				rewriteuri("2250@h2.ciscocm.sipit.net");
			}
			else {
				sl_send_reply("404", "Not Found");
				break;
			}
		}
		append_hf("P-hint: usrloc applied\r\n");
	}
	route(FORWARD);
}

route[FORWARD]
{
	# send it out now; use stateful forwarding as it works reliably
	# even for UDP2TCP
	if (!t_relay()) {
		sl_reply_error();
	}
}

